// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: htABaZqjni3rpeuBprLs6a
// Component: 4IQQu1JKmgzVu

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Switch from "../../Switch"; // plasmic-import: zq8NVUIaMV8-I/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_interactions_tutorial.module.css"; // plasmic-import: htABaZqjni3rpeuBprLs6a/projectcss
import sty from "./PlasmicStep2.module.css"; // plasmic-import: 4IQQu1JKmgzVu/css

export type PlasmicStep2__VariantMembers = {};
export type PlasmicStep2__VariantsArgs = {};
type VariantPropType = keyof PlasmicStep2__VariantsArgs;
export const PlasmicStep2__VariantProps = new Array<VariantPropType>();

export type PlasmicStep2__ArgsType = {};
type ArgPropType = keyof PlasmicStep2__ArgsType;
export const PlasmicStep2__ArgProps = new Array<ArgPropType>();

export type PlasmicStep2__OverridesType = {
  root?: p.Flex<"div">;
  switch1?: p.Flex<typeof Switch>;
  switch2?: p.Flex<typeof Switch>;
};

export interface DefaultStep2Props {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicStep2__RenderFunc(props: {
  variants: PlasmicStep2__VariantsArgs;
  args: PlasmicStep2__ArgsType;
  overrides: PlasmicStep2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "switch1.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "switch2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__juHp
              )}
            >
              {"FAQ"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___35XCw)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7TxFl
                )}
              >
                {"Question: Why is the earth round?"}
              </div>
              <Switch
                data-plasmic-name={"switch1"}
                data-plasmic-override={overrides.switch1}
                className={classNames("__wab_instance", sty.switch1)}
                isChecked={
                  p.generateStateValueProp($state, ["switch1", "isChecked"]) ??
                  false
                }
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["switch1", "isChecked"])(
                    eventArgs[0]
                  );
                }}
              >
                {"Switch me"}
              </Switch>
              {(() => {
                try {
                  return $state.switch1.isChecked;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gYp9C
                  )}
                >
                  {"Answer: Gravity"}
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___309My)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gpaf5
                )}
              >
                {"Question: Why is the sky blue?"}
              </div>
              <Switch
                data-plasmic-name={"switch2"}
                data-plasmic-override={overrides.switch2}
                className={classNames("__wab_instance", sty.switch2)}
                isChecked={
                  p.generateStateValueProp($state, ["switch2", "isChecked"]) ??
                  false
                }
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["switch2", "isChecked"])(
                    eventArgs[0]
                  );
                }}
              >
                {"Switch me"}
              </Switch>
              {(() => {
                try {
                  return $state.switch2.isChecked;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rfCkg
                  )}
                >
                  {"Answer: It's complicated"}
                </div>
              ) : null}
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "switch1", "switch2"],
  switch1: ["switch1"],
  switch2: ["switch2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  switch1: typeof Switch;
  switch2: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStep2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStep2__VariantsArgs;
    args?: PlasmicStep2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStep2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStep2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicStep2__ArgProps,
          internalVariantPropNames: PlasmicStep2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStep2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStep2";
  } else {
    func.displayName = `PlasmicStep2.${nodeName}`;
  }
  return func;
}

export const PlasmicStep2 = Object.assign(
  // Top-level PlasmicStep2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    switch1: makeNodeComponent("switch1"),
    switch2: makeNodeComponent("switch2"),

    // Metadata about props expected for PlasmicStep2
    internalVariantProps: PlasmicStep2__VariantProps,
    internalArgProps: PlasmicStep2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStep2;
/* prettier-ignore-end */
